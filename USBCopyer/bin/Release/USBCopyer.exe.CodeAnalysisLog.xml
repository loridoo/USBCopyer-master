<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="d:\software\vs2017\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="15.0">
 <Targets>
  <Target Name="D:\code\USBCopyer-master\USBCopyer\bin\Release\USBCopyer.exe">
   <Modules>
    <Module Name="usbcopyer.exe">
     <Messages>
      <Message TypeName="MarkWindowsFormsEntryPointsWithStaThread" Category="Microsoft.Usage" CheckId="CA2232" Status="Active" Created="2017-04-25 12:52:08Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">使用 STAThreadAttribute 来标记程序集 'USBCopyer.exe' 中的入口点方法 'Program.Main(string[])'。</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="USBCopyer">
       <Types>
        <Type Name="Host" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2017-04-25 12:52:08Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="D:\code\USBCopyer-master\USBCopyer" File="Host.cs" Line="16">'Host.Host()' 调入具有 LinkDemand 的 'Process.GetProcessesByName(string)'。通过此调用，'Process.GetProcessesByName(string)' 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: &#xD;&#xA;   -&gt;'Host.Host()'&#xD;&#xA;   -&gt;'Host.Host()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DefWndProc(System.Windows.Forms.Message&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2017-04-25 12:52:08Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="D:\code\USBCopyer-master\USBCopyer" File="Host.cs" Line="171">'Host.DefWndProc(ref Message)' 调入具有 LinkDemand 的 'Form.DefWndProc(ref Message)'。通过此调用，'Form.DefWndProc(ref Message)' 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: &#xD;&#xA;   -&gt;'Host.DefWndProc(ref Message)'&#xD;&#xA;   -&gt;'Host.DefWndProc(ref Message)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="D:\code\USBCopyer-master\USBCopyer" File="Host.cs" Line="171">'Host.DefWndProc(ref Message)' 调入具有 LinkDemand 的 'Marshal.PtrToStructure(IntPtr, Type)'。通过此调用，'Marshal.PtrToStructure(IntPtr, Type)' 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: &#xD;&#xA;   -&gt;'Host.DefWndProc(ref Message)'&#xD;&#xA;   -&gt;'Host.DefWndProc(ref Message)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="D:\code\USBCopyer-master\USBCopyer" File="Host.cs" Line="171">'Host.DefWndProc(ref Message)' 调入具有 LinkDemand 的 'Message.LParam.get()'。通过此调用，'Message.LParam.get()' 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: &#xD;&#xA;   -&gt;'Host.DefWndProc(ref Message)'&#xD;&#xA;   -&gt;'Host.DefWndProc(ref Message)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="D:\code\USBCopyer-master\USBCopyer" File="Host.cs" Line="171">'Host.DefWndProc(ref Message)' 调入具有 LinkDemand 的 'Message.Msg.get()'。通过此调用，'Message.Msg.get()' 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: &#xD;&#xA;   -&gt;'Host.DefWndProc(ref Message)'&#xD;&#xA;   -&gt;'Host.DefWndProc(ref Message)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="D:\code\USBCopyer-master\USBCopyer" File="Host.cs" Line="171">'Host.DefWndProc(ref Message)' 调入具有 LinkDemand 的 'Message.WParam.get()'。通过此调用，'Message.WParam.get()' 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: &#xD;&#xA;   -&gt;'Host.DefWndProc(ref Message)'&#xD;&#xA;   -&gt;'Host.DefWndProc(ref Message)'</Issue>
            </Message>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2017-04-25 12:52:08Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="D:\code\USBCopyer-master\USBCopyer" File="Host.cs" Line="171">向 'Host.DefWndProc(ref Message)' 添加下列安全特性以匹配基方法 'Form.DefWndProc(ref Message)' 上的 LinkDemand: [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#openBlog()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2017-04-25 12:52:08Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="D:\code\USBCopyer-master\USBCopyer" File="Host.cs" Line="526">'Host.openBlog()' 调入具有 LinkDemand 的 'Process.Start(string, string)'。通过此调用，'Process.Start(string, string)' 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: &#xD;&#xA;   -&gt;'Host.openBlog()'&#xD;&#xA;   -&gt;'Host.openBlog()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#openFile()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2017-04-25 12:52:08Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="D:\code\USBCopyer-master\USBCopyer" File="Host.cs" Line="510">'Host.openFile()' 调入具有 LinkDemand 的 'Process.Start(string, string)'。通过此调用，'Process.Start(string, string)' 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: &#xD;&#xA;   -&gt;'Host.openFile()'&#xD;&#xA;   -&gt;'Host.openFile()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#openLogFile()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2017-04-25 12:52:08Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="D:\code\USBCopyer-master\USBCopyer" File="Host.cs" Line="475">'Host.openLogFile()' 调入具有 LinkDemand 的 'Process.Start(string, string)'。通过此调用，'Process.Start(string, string)' 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: &#xD;&#xA;   -&gt;'Host.openLogFile()'&#xD;&#xA;   -&gt;'Host.openLogFile()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#openPage()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2017-04-25 12:52:08Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="D:\code\USBCopyer-master\USBCopyer" File="Host.cs" Line="548">'Host.openPage()' 调入具有 LinkDemand 的 'Process.Start(string, string)'。通过此调用，'Process.Start(string, string)' 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: &#xD;&#xA;   -&gt;'Host.openPage()'&#xD;&#xA;   -&gt;'Host.openPage()'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="USBCopyer.Properties">
       <Types>
        <Type Name="Resources" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="ExcludedInSource" Created="2017-04-25 12:52:08Z" FixCategory="NonBreaking" LastSeen="0001-01-01 00:00:00Z" />
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>避免使用未调用的私有代码</Name>
   <Description>存在对外部不可见的未调用代码，该代码不是已知的运行时入口点。如果错误地引发此冲突，请向 Visual Studio 代码分析团队发送问题报告。</Description>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>不要使用链接请求间接公开方法</Name>
   <Description>不要使用不执行安全性检查的方法来包装受 LinkDemand 保护的方法。LinkDemand 检查直接调用方的权限而不是调用堆栈中所有调用方的权限。在这种情况下，将检查包装器方法的权限。如果包装器方法本身不检查调用堆栈中位置较高的调用方的权限，则尽管恶意代码没有足够的权限，但它仍可能能够执行被包装的函数。</Description>
   <Resolution Name="Default">{0} 调入具有 LinkDemand 的 {1}。通过此调用，{1} 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="MarkWindowsFormsEntryPointsWithStaThread" Category="Microsoft.Usage" CheckId="CA2232">
   <Name>使用 STAThread 标记 Windows 窗体的入口点</Name>
   <Description>引用 System.Windows.Forms 的程序集应具有 STAThreadAttribute 特性。未能应用此特性将很可能导致应用程序无法运行。Windows 窗体依赖于一些使用 STA 模型的组件。</Description>
   <Resolution Name="Default">使用 STAThreadAttribute 来标记程序集 {1} 中的入口点方法 {0}。</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182351.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123">
   <Name>重写链接请求应与基相同</Name>
   <Description>在很多情况下，如果一个虚方法具有 LinkDemand，则它的任何重写方法都应具有 LinkDemand，同样，如果一个重写方法具有 LinkDemand，则被重写的虚方法也应具有 LinkDemand。由于调用方可能显式调用虚方法的任何重写方法，因此这些方法应具有相同的 LinkDemand 状态，否则应检查它们。由于调用方可能使用接口类型的引用来访问方法，因此上述规则也适用于对属于接口实现的方法进行的 LinkDemand 安全性检查。</Description>
   <Resolution Name="BaseOnly">向 {0} 添加下列安全特性以匹配基方法 {1} 上的 LinkDemand: {2}。</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182305(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securitytransparencyrules.dll" Version="4.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">类别</String>
  <String Key="Certainty">确定性</String>
  <String Key="CollapseAll">全部折叠</String>
  <String Key="CheckId">检查 ID</String>
  <String Key="Error">错误</String>
  <String Key="Errors">错误</String>
  <String Key="ExpandAll">全部展开</String>
  <String Key="Help">帮助</String>
  <String Key="Line">行</String>
  <String Key="Messages">消息</String>
  <String Key="LocationNotStoredInPdb">[位置未存储在 Pdb 中]</String>
  <String Key="Project">项目</String>
  <String Key="Resolution">解析</String>
  <String Key="Rule">规则</String>
  <String Key="RuleFile">规则文件</String>
  <String Key="RuleDescription">规则说明</String>
  <String Key="Source">源</String>
  <String Key="Status">状态</String>
  <String Key="Target">目标</String>
  <String Key="Warning">警告</String>
  <String Key="Warnings">警告</String>
  <String Key="ReportTitle">代码分析报告</String>
 </Localized>
</FxCopReport>
